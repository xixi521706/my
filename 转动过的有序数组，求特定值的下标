int find_n(int A[],int s,int e,int target)       //二分查找
{
    int mid=(e-s)/2;
    while(s <= e)
    {
        if(A[mid] == target)
            return mid;
        else if(A[mid] > target)
            return find_n(A,s,mid-1,target);
        else
            return find_n(A,mid+1,e,target);
    }
    return -1;
}
int find(int* A,int n,int target)
{
    if(A[0]<A[n-1])
        return find_n(A,0,n,target);
    int s=0,e=n-1,mid=(e-s)/2;
    while(s <= e)
    {
        if(A[mid] == target)
            return mid;
        if(A[mid] >= A[0])      //判断数组从第几个元素开始翻转
            e=mid-1;
        else
            s=mid+1;
    }
}
int main(int A[],int n,int target)
{
    int ret=find(A,n,target);
    return 0;
}
